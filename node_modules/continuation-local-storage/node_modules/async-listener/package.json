{
  "name": "async-listener",
  "version": "0.4.5",
  "description": "Polyfill exporting trevnorris's 0.11+ asyncListener API.",
  "author": {
    "name": "Forrest L Norvell",
    "email": "ogd@aoaioxxysz.net"
  },
  "contributors": [
    {
      "name": "Tim Caswell",
      "email": "tim@creationix.com"
    },
    {
      "name": "Forrest L Norvell",
      "email": "ogd@aoaioxxysz.net"
    }
  ],
  "main": "index.js",
  "scripts": {
    "test": "tap test/*.tap.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/othiym23/async-listener.git"
  },
  "keywords": [
    "polyfill",
    "shim",
    "zesty",
    "crazed",
    "experimental"
  ],
  "license": "BSD-2-Clause",
  "bugs": {
    "url": "https://github.com/othiym23/async-listener/issues"
  },
  "engines": {
    "node": "<=0.11.8"
  },
  "dependencies": {
    "shimmer": "1.0.0"
  },
  "devDependencies": {
    "tap": "~0.4.4"
  },
  "readme": "[![NPM](https://nodei.co/npm/async-listener.png?downloads=true&stars=true)](https://nodei.co/npm/async-listener/)\n\n# process.addAsyncListener polyfill\n\nThis is an implementation of Trevor Norris's\nprocess.{addAsyncListener,removeAsyncListener} API for adding behavior to async\ncalls. You can see his implementation (currently a work in progress) on\n[Node.js core pull request #6011](https://github.com/joyent/node/pull/6011).\nThis polyfill / shim is intended for use in versions of Node prior to whatever\nversion of Node in which Trevor's changes finally land (anticipated at the time of\nthis writing as 0.11.7).\n\nHere's his documentation of the intended API, which will probably get cleaned up\nhere later:\n\n## createAsyncListener(listener[, callbacks[, storage]])\n\n* `listener` {Function}\n* `callbacks` {Object}\n* `storage` {Value}\n\nReturns a constructed `AsyncListener` object. Which can then be passed to\n`process.addAsyncListener()` and `process.removeAsyncListener()`. Each\nfunction parameter is as follows:\n\n* `listener(storage)`: A `Function` called as an asynchronous event is\nqueued. If a {Value} is returned then it will be attached to the event as\n`storage` and overwrite any pre-defined value passed to\n`createAsyncListener()`. If a `storage` argument is passed initially then\nit will also be passed to `listener()`.\n* `callbacks`: An `Object` which may contain three optional fields:\n  * `before(context, storage)`: A `Function` that is called immediately\n  before the asynchronous callback is about to run. It will be passed both\n  the `context` (i.e. `this`) of the calling function and the `storage`\n  either returned from `listener` or passed during construction (if either\n  was done).\n  * `after(context, storage)`: A `Function` called immediately after the\n  asynchronous event's callback is run. Note that if the event's callback\n  throws during execution this will not be called.\n  * `error(storage, error)`: A `Function` called if the event's callback\n  threw. If `error` returns `true` then Node will assume the error has\n  been properly handled and resume execution normally.\n* `storage`: A `Value` (i.e. anything) that will be, by default, attached\nto all new event instances. This will be overwritten if a `Value` is\nreturned by `listener()`.\n\n\n## addAsyncListener(listener[, callbacks[, storage]])\n## addAsyncListener(asyncListener)\n\nReturns a constructed `AsyncListener` object and immediately adds it to\nthe listening queue.\n\n\n## removeAsyncListener(asyncListener)\n\nRemoves the `asyncListener` from the listening queue.\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/othiym23/async-listener",
  "_id": "async-listener@0.4.5",
  "dist": {
    "shasum": "667313b952df1be06ddf5622410de61214ea516a"
  },
  "_from": "async-listener@0.4.5",
  "_resolved": "https://registry.npmjs.org/async-listener/-/async-listener-0.4.5.tgz"
}
