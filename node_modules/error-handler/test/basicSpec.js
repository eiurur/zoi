var ErrorHandler = require('../errorHandler.js'),
    http = require('http'),
    request = require('request');

describe('The error handler should', function () {
  var server,
      nOfErrors,
      closing;

  // Simplify requests.
  function req (url, cb) {
    request('http://localhost:3000' + url, cb);
  }

  it('setup properly.', function (done) {

    // Set up basic server.
    server = http.createServer(function (req, res) {
      ErrorHandler(req, res, {
        handler: function (req, res, err) {
          res.writeHead(500, {'Content-Type': 'text/plain'});
          res.end('Server error.\n');

          nOfErrors++;
        },
        log: function (err, stack) {
          // Do nothing.
        },
        fatal: false
      });

      function complain () {
        throw new Error('A loud complaint.');
      }

      switch (req.url) {
        case '/timeout':
          setTimeout(function () {
            complain();
          }, 100);

          // Jasmine messes with setTimeout.
          jasmine.clock().tick(101);
          break;
        case '/nextTick':
          return process.nextTick(complain);
        case '/file':
          return fs.readFile(__filename, complain);
        case '/allGood':
          return res.end('OK');
        default:
          return complain();
      }
    });

    server.listen(3000, function () {
      expect(server.address().port).toBe(3000);

      server.on('close', function () {
        if (!closing) throw new Error('Server crashed');
      });

      done();
    });
  });

  it('handle immediate errors.', function (done) {
    req('/', function (err, res, body) {
      expect(err).toBe(null);
      expect(res.statusCode).toBe(500);
      expect(body).toEqual('Server error.\n');

      done();
    });
  });

  it('handle timeouts.', function (done) {
    req('/timeout', function (err, res, body) {
      if (err) throw err;
      expect(err).toBe(null);
      expect(res.statusCode).toBe(500);
      expect(body).toEqual('Server error.\n');

      done();
    });
  });

  it('not handle non-errors.', function (done) {
    req('/allGood', function (err, res, body) {
      expect(err).toBe(null);
      expect(res.statusCode).toBe(200);
      expect(body).toEqual('OK');

      done();
    });
  });

  it('be fine with nextTicks.', function (done) {
    req('/nextTick', function (err, res, body) {
      expect(err).toBe(null);
      expect(res.statusCode).toBe(500);
      expect(body).toEqual('Server error.\n');

      done();
    });
  });

  it('handle async errors.', function (done) {
    req('/file', function (err, res, body) {
      expect(err).toBe(null);
      expect(res.statusCode).toBe(500);
      expect(body).toEqual('Server error.\n');

      done();
    });
  });

  it('shut down fine.', function (done) {
    closing = true;

    server.close();

    expect(server.address()).toBe(null);
    done();
  });
});