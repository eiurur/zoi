{
  "name": "yakaa",
  "version": "1.0.0",
  "description": "Yet Another Keep-Alive Agent",
  "main": "index.js",
  "scripts": {
    "test": "tap test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/newrelic/yakaa"
  },
  "keywords": [
    "keep-alive",
    "agent",
    "http",
    "https",
    "client",
    "extraction"
  ],
  "author": {
    "name": "Forrest L Norvell",
    "email": "forrest@newrelic.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/newrelic/yakaa/issues"
  },
  "homepage": "https://github.com/newrelic/yakaa",
  "devDependencies": {
    "tap": "^0.4.8"
  },
  "readme": "## yakaa: yet another keep-alive agent\n\nThis is an extracted copy of Node 0.12's keep-alive Agent implementation with\nsome small changes intended to make it work with older versions of Node. It\nalso has one extra feature, which I needed.\n\nThe HTTP Agent is used for pooling sockets used in HTTP client requests.\n\nThe HTTP Agent also defaults client requests to using Connection:keep-alive. If\nno pending HTTP requests are waiting on a socket to become free the socket is\nclosed. This means that Node's pool has the benefit of keep-alive when under\nload but still does not require developers to manually close the HTTP clients\nusing KeepAlive.\n\nIf you opt into using HTTP KeepAlive, you can create an Agent object with that\nflag set to `true`.  (See the [constructor options](#http_new_agent_options)\nbelow.)  Then, the Agent will keep unused sockets in a pool for later use.\nThey will be explicitly marked so as to not keep the Node process running.\nHowever, it is still a good idea to explicitly\n[`destroy()`](#http_agent_destroy) KeepAlive agents when they are no longer in\nuse, so that the Sockets will be shut down.\n\nSockets are removed from the agent's pool when the socket emits either a\n\"close\" event or a special \"agentRemove\" event. This means that if you intend\nto keep one HTTP request open for a long time and don't want it to stay in the\npool you can do something along the lines of:\n\n    http.get(options, function(res) {\n      // Do stuff\n    }).on(\"socket\", function (socket) {\n      socket.emit(\"agentRemove\");\n    });\n\n### var Agent = require('yakaa'); new Agent([options])\n\n* `options` {Object} Set of configurable options to set on the agent.\n  Can have the following fields:\n  * `keepAlive` {Boolean} Keep sockets around in a pool to be used by\n    other requests in the future. Default = `false`\n  * `keepAliveMsecs` {Integer} When using HTTP KeepAlive, how often\n    to send TCP KeepAlive packets over sockets being kept alive.\n    Default = `1000`.  Only relevant if `keepAlive` is set to `true`.\n  * **ADDED** `keepAliveTimeoutMsecs` {Integer} When using HTTP KeepAlive, how\n    long to keep the socket connected without activity before it gets reaped.\n  * `maxSockets` {Number} Maximum number of sockets to allow per\n    host.  Default = `Infinity`.\n  * `maxFreeSockets` {Number} Maximum number of sockets to leave open\n    in a free state.  Only relevant if `keepAlive` is set to `true`.\n    Default = `256`.\n\nThe default `http.globalAgent` that is used by `http.request` has all\nof these values set to their respective defaults.\n\nTo configure any of them, you must create your own `Agent` object.\n\n```javascript\nvar http = require('http');\nvar Agent = require('yakaa');\nvar keepAliveAgent = new Agent({ keepAlive: true });\nkeepAliveAgent.request(options, onResponseCallback);\n```\n\n### agent.maxSockets\n\nBy default set to Infinity. Determines how many concurrent sockets the agent\ncan have open per origin. Origin is either a 'host:port' or\n'host:port:localAddress' combination.\n\n### agent.maxFreeSockets\n\nBy default set to 256.  For Agents supporting HTTP KeepAlive, this\nsets the maximum number of sockets that will be left open in the free\nstate.\n\n### agent.sockets\n\nAn object which contains arrays of sockets currently in use by the\nAgent.  Do not modify.\n\n### agent.freeSockets\n\nAn object which contains arrays of sockets currently awaiting use by\nthe Agent when HTTP KeepAlive is used.  Do not modify.\n\n### agent.requests\n\nAn object which contains queues of requests that have not yet been assigned to\nsockets. Do not modify.\n\n### agent.destroy()\n\nDestroy any sockets that are currently in use by the agent.\n\nIt is usually not necessary to do this.  However, if you are using an\nagent with KeepAlive enabled, then it is best to explicitly shut down\nthe agent when you know that it will no longer be used.  Otherwise,\nsockets may hang open for quite a long time before the server\nterminates them.\n\n### agent.getName(options)\n\nGet a unique name for a set of request options, to determine whether a\nconnection can be reused.  In the http agent, this returns\n`host:port:localAddress`.  In the https agent, the name includes the\nCA, cert, ciphers, and other HTTPS/TLS-specific options that determine\nsocket reusability.\n\n\n## new Agent.SSL(options)\n\nAn Agent object for HTTPS similar to Agent.\n\n`options` is an object. All options from Agent are valid.\n\nThe following options from [tls.connect()][] can also be used.\n\n- `pfx`: Certificate, Private key and CA certificates to use for SSL. Default `null`.\n- `key`: Private key to use for SSL. Default `null`.\n- `passphrase`: A string of passphrase for the private key or pfx. Default `null`.\n- `cert`: Public x509 certificate to use. Default `null`.\n- `ca`: An authority certificate or array of authority certificates to check\n  the remote host against.\n- `ciphers`: A string describing the ciphers to use or exclude. Consult\n  <http://www.openssl.org/docs/apps/ciphers.html#CIPHER_LIST_FORMAT> for\n  details on the format.\n- `rejectUnauthorized`: If `true`, the server certificate is verified against\n  the list of supplied CAs. An `'error'` event is emitted if verification\n  fails. Verification happens at the connection level, *before* the HTTP\n  request is sent. Default `true`.\n- `secureProtocol`: The SSL method to use, e.g. `SSLv3_method` to force\n  SSL version 3. The possible values depend on your installation of\n  OpenSSL and are defined in the constant [SSL_METHODS][].\n\nExample:\n\n```js\nvar SSLAgent = require('yakaa').SSL;\n\nvar options = {\n  hostname: 'encrypted.google.com',\n  port: 443,\n  path: '/',\n  method: 'GET',\n  key: fs.readFileSync('test/fixtures/keys/agent2-key.pem'),\n  cert: fs.readFileSync('test/fixtures/keys/agent2-cert.pem')\n};\noptions.agent = new SSLAgent(options);\n```\n\n### LICENSE\n\nSee LICENSE in this distribution. As code derived from Node's source, it's\ngoverned by the same license as Node itself.\n",
  "readmeFilename": "README.md",
  "_id": "yakaa@1.0.0",
  "dist": {
    "shasum": "5a846937666f34a4df56e4502516aa73999e7953"
  },
  "_from": "yakaa@",
  "_resolved": "https://registry.npmjs.org/yakaa/-/yakaa-1.0.0.tgz"
}
